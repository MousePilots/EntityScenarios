/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.mousepilots.es.core.model;

import java.util.Comparator;
import java.util.List;
import java.util.function.Predicate;

/**
 *
 * @author jgeenen
 */
public interface EntityManagerES{

     /**
      * Creates an entity with a specified {@code id}. Use this method <em>if
      * and only if</em>
      * the entity has no generated id
      *
      * @param <E> the managed type
      * @param <ID> the id-type
      * @param type the managed type
      * @param id required
      * @return the newly created instance with {@code id} set
      * @throws IllegalArgumentException if the corresponding entity-class is
      * not instantiable or has a generated id
      */
     <E, ID> E create(EntityTypeES<E> type, ID id) throws IllegalArgumentException;

     /**
      * Creates an entity. Use this method <em>if and only if</em> the entity
      * has a generated id. The client-id is auto-generated by the
      * {@link Generator} configured for the entity's id-attribute
      *
      * @param <E> the managed type
      * @param type the managed type
      * @return the newly created instance with {@code id} set
      * @throws IllegalArgumentException if the corresponding entity-class is
      * not instantiable or has a generated id
      */
     <E> E create(EntityTypeES<E> type);

     <E> E create(EmbeddableTypeES<E> type);

    /**
     * Finds the instance of (a subclass of) the {@code identifiableJavaType} with the specified {@code id}. The search also 
     * considers subclasses of the {@code identifiableJavaType}.
     * @param <T>
     * @param identifiableJavaType
     * @param id
     * @return 
     */
    <T> T find(Class<T> identifiableJavaType, Object id);
    
    /**
     * Selects all instances of (subclasses of) the {@code identifiableJavaType} satisfying the specified
     * {@code restrictions}, optionally sorting the result-list with the {@code sorter}.
     * @param <T>
     * @param identifiableJavaType
     * @param restrictions optional
     * @param sorter optional - for sorting the result-list
     * @return 
     */
    <T> List<T> select(IdentifiableTypeES<T> identifiableJavaType, Predicate<T> restrictions,Comparator<T> sorter);

    /**
     * Selects all instances of (subclasses of) the {@code identifiableJavaClass} satisfying the specified
     * {@code restrictions}, optionally sorting the result-list with the {@code sorter}.
     * @param <T>
     * @param identifiableJavaClass
     * @param restrictions optional
     * @param sorter optional - for sorting the result-list
     * @return 
     */    
    <T> List<T> select(Class<T> identifiableJavaClass, Predicate<T> restrictions, Comparator<T> sorter);
    
    EntityTransaction getTransaction();

    void remove(Object entity);

    boolean contains(Object entity);

    MetamodelES getMetamodel();

    EntityManagerFactory getEntityManagerFactory();

    <T> T find(final IdentifiableTypeES<T> identifiableType, Object primaryKey);


}
