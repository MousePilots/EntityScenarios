## Velocity Template.
package ${package};

import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.mousepilots.es.shared.impl.AbstractAttribute;
import org.mousepilots.es.shared.Maps;
import org.mousepilots.es.shared.model.PersistentAttributeType;
import org.mousepilots.es.shared.model.Type;
import org.mousepilots.es.shared.model.Arity;
import org.mousepilots.es.shared.model.Attribute;
import org.mousepilots.es.shared.model.Attribute.AccessPoint;
import org.mousepilots.es.shared.model.GwtIncompatible;
import org.mousepilots.es.shared.model.JpaCollectionType;
import org.mousepilots.es.shared.model.ValueWrapper;


/**
 * Models {@link ${ad.owner.javaTypeName}#${ad.name}} with type ${ad.getAttributeJavaTypeJavaDoc()}
 * @author geenenju
 */
@javax.annotation.Generated(value = "org.mousepilots.es.maven.model.generator.plugin.MetaModelGeneratorMojo")
public final class ${ad.enumName} extends AbstractAttribute{

    public static final String NAME="${ad.enumName}";

    public static final ${ad.enumName} INSTANCE = new ${ad.enumName}(
        "${ad.enumName}", 
        "${ad.name}", 
        "${ad.javaTypeName}", 
        PersistentAttributeType.${ad.getPersistenceType().name()}, 
        ${ad.isId()}, 
        ${ad.isGeneratedValue()}, 
        ${ad.isVersion()}, 
        $ad.ordinal,
## JPA collection type
#if(${ad.getJpaCollectionType()})
        JpaCollectionType.${ad.getJpaCollectionType().name()},
#else
        null,
#end
        ${ad.isReadOnly()},
        ${ad.isNullable()}
    );
    
    private ${ad.enumName}(
            String name, 
            String attributeName, 
            String javaClassName, 
            PersistentAttributeType persistentAttributeType, 
            boolean id, 
            boolean generatedValue, 
            boolean version, 
            int ordinal,
            JpaCollectionType jpaCollectionType,
            boolean readOnly,
            boolean nullable) {
        super(name, attributeName,javaClassName, persistentAttributeType, id, generatedValue, version, ordinal, jpaCollectionType,readOnly,nullable);
## AssociationImpl or RelationImpl
#set($vad = ${ad.getValueAssociationDescriptor()})
#if($vad)
## add an association
        this.associations.put(
            AccessPoint.VALUE, 
#if(${vad.isRelation()})
## add a relation
            new org.mousepilots.es.shared.impl.AbstractRelation(
                this, 
                Arity.${vad.getArity().name()},
                ${vad.isOwningSide()}
            ){
                @Override
                public final Type getTargetType() {
                    return ${vad.targetType.abstractDescriptorImplClassName}.INSTANCE;
                }

                @Override
                public final Attribute getInverseAttribute() {
#if($vad.inverseAttribute)
                    return ${vad.inverseAttribute.abstractDescriptorImplClassName}.INSTANCE;
#else
                    return null;
#end

                }

            }
#else 
## add an association
            new org.mousepilots.es.shared.impl.AbstractAssociation(this){
                @Override
                public final Type getTargetType() {
                    return ${vad.targetType.abstractDescriptorImplClassName}.INSTANCE;
                }

            }
#end
        );
#else
#end
    }

    @GwtIncompatible @Override
    public javax.persistence.metamodel.Attribute getMetaModelField() {
        return ${ad.getMetaModelFieldFQN()};
    }


    @GwtIncompatible @Override
    public Object get(Serializable instance) {
        return ((${ad.owner.javaTypeName}) instance).${ad.getterName()}();
    }

    @GwtIncompatible @Override
    public void set(Serializable instance, Serializable value) {
#if( ${ad.setterName()} )        
        ((${ad.owner.javaTypeName}) instance).${ad.setterName()}(
            (${ad.genericTypeString}) value
        );
#else
        throw new UnsupportedOperationException(this + " cannot be set");
#end
    }

    @Override
    public final Type getOwner(){
        return ${ad.owner.abstractDescriptorImplClassName}.INSTANCE;
    }

    @GwtIncompatible @Override
    public final Class getJavaClass(){
        return ${ad.javaTypeName}.class;
    }

    @Override
    public List<Attribute> getSuperAttributes() {
#if(${ad.getSuperAttributes().isEmpty()})
        return Collections.EMPTY_LIST;
#else 
        return Arrays.<Attribute>asList(
#foreach($sad in ${ad.getSuperAttributes()})
                ${sad.abstractDescriptorImplClassName}.INSTANCE#if($foreach.hasNext),

#else
        );
    #end
#end
#end

    }

    @Override
    public <T> ValueWrapper<T> wrap(T value) {
        ValueWrapper retval = ${ad.wrappedValueDescriptor.wrapperConstructorInvocation};
        return retval;
    }

}
