/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package $package;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.persistence.metamodel.Type.PersistenceType;
import org.mousepilots.es.shared.impl.AbstractType;
import org.mousepilots.es.shared.model.Attribute;
import org.mousepilots.es.shared.model.Type;
import org.mousepilots.es.shared.model.GwtIncompatible;

/**
 * Models {@link $td.javaTypeName} with persistence type {@link PersistenceType#${td.getPersistenceType().name()}}
 * @author geenenju
 */
@javax.annotation.Generated(value = "org.mousepilots.es.maven.model.generator.plugin.MetaModelGeneratorMojo")
public class $td.name extends AbstractType{

    public static final String NAME="$td.name";

    public static final Type INSTANCE = new ${td.name}(
        "${td.javaTypeName}", 
        "$td.name",
        $td.ordinal,
        ${td.isInstantiable()},
        PersistenceType.${td.getPersistenceType().name()}
    );

    private ${td.name}(
            String javaClassName, 
            String name, 
            int ordinal, 
            boolean instantiable, 
            PersistenceType persistenceType) {
        super(javaClassName, name, ordinal, instantiable, persistenceType);
    }

    @GwtIncompatible @Override
    public Class getMetaModelClass() {
        return ${td.javaTypeName}_.class;
    }

    @GwtIncompatible @Override
    public Serializable create() throws UnsupportedOperationException {
#if(${td.isInstantiable()})
        return new ${td.javaTypeName}();
#else
        throw new UnsupportedOperationException("${td.javaTypeName} has no public zero-arg constructor");
#end
    }


    @Override
    public Attribute getId() {
#if(${td.getId()})
        return ${td.getId().getAbstractDescriptorImplClassName()}.INSTANCE; 
#else 
        return null; 
#end
    }

    @Override
    public Attribute getVersion() {
#if(${td.getVersion()})
        return ${td.getVersion().getAbstractDescriptorImplClassName()}.INSTANCE; 
#else 
        return null; 
#end
    }

    @GwtIncompatible @Override
    public final Class getJavaClass(){
        return ${td.javaTypeName}.class;
    }

    @Override
    public List<Attribute> getAttributes() {
#if(${td.getAttributeDescriptors()})
        return Arrays.<Attribute>asList(
#foreach($ad in ${td.getAttributeDescriptors()})
                ${ad.abstractDescriptorImplClassName}.INSTANCE#if($foreach.hasNext),
#else
        );
    #end
#end
#else return Collections.EMPTY_LIST;
#end
    }

    @Override
    public List<Type> getSuperTypes() {
#if(${td.getSuperTypes().isEmpty()})
        return Collections.EMPTY_LIST;
#else 
        return Arrays.<Type>asList(
#foreach($st in ${td.getSuperTypes()})
            ${st.abstractDescriptorImplClassName}.INSTANCE#if($foreach.hasNext),
#else
        );
    #end
#end
#end
    }

    @Override
    public List<Type> getSubTypes() {
#if(${td.getSubTypes().isEmpty()})
        return Collections.EMPTY_LIST;
#else 
        return Arrays.<Type>asList(
#foreach($st in ${td.getSubTypes()})
            ${st.abstractDescriptorImplClassName}.INSTANCE#if($foreach.hasNext),
#else
        );
    #end
#end
#end
    }

    
}
